/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. 
 */

/*
 * CellPanel.java
 *
 * Created on 8 dec. 2011, 16:30:47
 */
package heinecke.sudoku.panel;

import java.awt.Color;
import java.text.NumberFormat;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JFormattedTextField;
import javax.swing.text.DefaultFormatterFactory;
import heinecke.sudoku.Cell;
import heinecke.sudoku.Sudoku;

/**
 *
 * @author Johannes Heinecke <johannes dot heinecke at orange fr>
 */
public class CellPanel extends javax.swing.JPanel {

    private NumberFormat number = null;
    private DefaultFormatterFactory factory = null;

    /** Creates new form CellPanel */
    public CellPanel() {
        // does not work yet. For the time being we check the value of the JFormattedTextField manually
        number = NumberFormat.getIntegerInstance();

        number.setMaximumIntegerDigits(1);
        number.setMinimumIntegerDigits(0);
//        factory = new DefaultFormatterFactory(new NumberFormatter(number),
//                new NumberFormatter(number), new NumberFormatter(number));
        initComponents();

    }

    public int getValue() {
        String val = valueField.getText();       
        if (val != null && !val.isEmpty()
                && !val.matches(Sudoku.inValidSymbol)) {
                //&& val.matches("^\\d$")) {
            return Integer.parseInt(valueField.getText(), 36);
        } else {
            return 0;

        }
    }

    public synchronized void setValue(Cell cell, boolean color) {
        if (cell != null && cell.getValue() != null) {
            if (color && valueField.getText().isEmpty()) {
                // set colour of calulated values
                valueField.setForeground(Color.BLUE);
                setCandidates(null);
            } else {
                if (cell.isValid()) {
                    valueField.setForeground(Color.BLACK);
                } else {
                    valueField.setForeground(Color.RED);
                }
            }
            Integer i = cell.getValue();
            //System.out.println("EEEE:" + i + ", " + Integer.toString(i, 36));
            valueField.setText(Integer.toString(i, 36));
        } else {
            valueField.setText("");
            valueField.setForeground(Color.BLACK);

        }
       // repaint();
    }

    public void setLabel(String s) {
        candidateLabel.setText(s);
    }

    public void setEditable(boolean v) {
        valueField.setEditable(v);
    }

    public void setCandidates(Set<Integer> candidates) {
        if (candidates != null && !candidates.isEmpty()) {
            String c = "";
            Iterator<Integer> it = candidates.iterator();
            while (it.hasNext()) {
                Integer i = it.next();
                c += Integer.toString(i, 36);
            }
            candidateLabel.setText(c);
        } else {
            candidateLabel.setText("");

        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        candidateLabel = new javax.swing.JLabel();
        valueField = //new JFormattedTextField(number);
        new JFormattedTextField(factory);

        setMaximumSize(new java.awt.Dimension(10, 10));
        setLayout(new java.awt.GridBagLayout());

        candidateLabel.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        candidateLabel.setForeground(new java.awt.Color(255, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        add(candidateLabel, gridBagConstraints);

        valueField.setColumns(1);
        valueField.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        valueField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valueField.setPreferredSize(new java.awt.Dimension(2, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(valueField, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel candidateLabel;
    private javax.swing.JTextField valueField;
    // End of variables declaration//GEN-END:variables
}
