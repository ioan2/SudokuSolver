/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. 
 */

/*
 * SquareGroup.java
 *
 * Created on 09.12.2011, 23:49:59
 */
package heinecke.sudoku.panel;

import heinecke.sudoku.CallableProgram;
import heinecke.sudoku.Field;
import heinecke.sudoku.Square;
import heinecke.sudoku.Sudoku;

/**
 * Contains 9 squares, the main field
 * @author Johannes Heinecke <johannes heinecke at wanadoo dot fr>
 */
public class FieldPanel extends javax.swing.JPanel implements CallableProgram {
    /* 0 1 2
     * 3 4 5
     * 6 7 8
     */

    SquarePanel[] squarePanels;
    // permets acces to all cells
    //CellPanel[][] cells;
    Sudoku skReset = null;
    Sudoku skThread = null;
    final public static String Version="2013.02.22";

    /** Creates new form SquareGroup */
    public FieldPanel() {
        initComponents();
       versionLabel.setText("Sudoku Solver. V " + Version);
        
        squarePanels = new SquarePanel[Sudoku.size];
        for (int i = 0; i < Sudoku.size; i++) {
            SquarePanel cp = addCellGroup(i / Sudoku.sqaresize, i % Sudoku.sqaresize);
            squarePanels[i] = cp;
        }
        // get all CellPanels in the 2-dim array for easy acces
    }

    /** et CellPanels editable or not */
    public void setEditable(boolean v) {
        for (int i = 0; i < Sudoku.size; i++) {
            squarePanels[i].setEditable(v);
        }
    }

    /** set the values of the Sudoku to the panels */
    public void setValues(Field f, boolean color) {
        if (f != null) {
            Square[] squares = f.getSquares();
            for (int i = 0; i < Sudoku.size; i++) {
                squarePanels[i].setValues(squares[i], color);
            }
        } else {
            for (int i = 0; i < Sudoku.size; i++) {
                squarePanels[i].setValues(null, color);
            }
        }
    }

    /** set values of the panels to the Sudoku-field */
    public void putValues(Field f) {
        Square[] squares = f.getSquares();
        for (int i = 0; i < Sudoku.size; i++) {
            squarePanels[i].putValues(squares[i]);
        }
    }

    public SquarePanel[] getSquares() {
        return squarePanels;
    }

    private SquarePanel addCellGroup(int row, int col) {
        java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = row;
        gridBagConstraints.gridx = col;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        //gridBagConstraints.ipadx = 1;
        //gridBagConstraints.ipady = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;

        SquarePanel cp = new SquarePanel();
        add(cp, gridBagConstraints);
        return cp;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonPanel = new javax.swing.JPanel();
        solveButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        showStepsToggle = new javax.swing.JToggleButton();
        cleanButton = new javax.swing.JButton();
        messageLabel = new javax.swing.JLabel();
        versionLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        solveButton.setText("solve!");
        solveButton.setToolTipText("click here to start the solver");
        solveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solveAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        buttonPanel.add(solveButton, gridBagConstraints);

        resetButton.setText("reset");
        resetButton.setToolTipText("reset to initial values");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        buttonPanel.add(resetButton, gridBagConstraints);

        showStepsToggle.setText("show steps");
        showStepsToggle.setToolTipText("stops after each step (continue with \"solve!\" button)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        buttonPanel.add(showStepsToggle, gridBagConstraints);

        cleanButton.setText("clean");
        cleanButton.setToolTipText("delete all digits");
        cleanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        buttonPanel.add(cleanButton, gridBagConstraints);

        messageLabel.setForeground(new java.awt.Color(255, 0, 0));
        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        messageLabel.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.weightx = 1.0;
        buttonPanel.add(messageLabel, gridBagConstraints);

        versionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        versionLabel.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 11;
        gridBagConstraints.weightx = 1.0;
        buttonPanel.add(versionLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        add(buttonPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void solveAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveAction
        setEditable(false);
        if (skThread == null || !skThread.pleaseWait) {
            if (skThread != null && skThread.getTotallySolved() != Sudoku.Status.NOT_YET_SOLVED) return;
            //System.out.println("SOLVING " + skThread);
            // we start solving

            skThread = new Sudoku();
            //System.out.println("jjj " + showStepsToggle.isSelected());
            skThread.init(false);

            // take values from panels to the Sudoku field
            this.putValues(skThread.getField());

            boolean ok = skThread.getField().check();
            if (!ok) {
                //System.out.println("Invalid field");
                // change colours of invalid fields
                messageLabel.setText(skThread.getField().getErrorMessage());
                setEditable(true);
                this.setValues(skThread.getField(), true);
                return;
            }
            skReset = skThread.copy(skThread);
             System.out.println("START\n" + skThread);
            if (showStepsToggle.isSelected()) {
                skThread.setStopAtStep(true);
                skThread.setCp(this);
                skThread.start();
            } else {
                skThread.setStopAtStep(false);
                skThread.setCp(this);
                //skThread.calculate();
                skThread.start();
            }
            //System.out.println("SOLUTION\n" + skThread);
            this.setValues(skThread.getField(), true);
            if (skThread.getTotallySolved() == Sudoku.Status.NO_SOLUTION) {
                messageLabel.setText(skThread.getErrorMessage());
            }
            //System.out.println("OLD " + sk2);
        } else {
            // continuing
            if (//showStepsToggle.isSelected() &&
                    skThread.getTotallySolved() == Sudoku.Status.NOT_YET_SOLVED) {
                skThread.setStopAtStep(showStepsToggle.isSelected());
                //System.out.println("CONTINUING");
                //this.setValues(skThread.getField(), true);
                synchronized (skThread) {
                    //System.out.println("continue");
                    skThread.pleaseWait = false;
                    skThread.notify();
                }
            }
        }

    }//GEN-LAST:event_solveAction

    /** display current state and go on */
    public void display(Sudoku sk) {
        //System.out.println("CURRENT: " + sk);
        this.setValues(sk.getField(), true);
    }

    private void resetAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAction
        setEditable(true);
        messageLabel.setText(" ");
        if (skReset != null) {
            this.setValues(skReset.getField(), false);
            skThread = null;
        }
    }//GEN-LAST:event_resetAction

    private void cleanAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanAction
        setEditable(true);
        this.setValues(null, false);
    }//GEN-LAST:event_cleanAction

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cleanButton;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JButton resetButton;
    private javax.swing.JToggleButton showStepsToggle;
    private javax.swing.JButton solveButton;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables
}
